a <- (predict(medal_model, test_data) - test_data$Medal_Proportion)* 100
mean(a)
sd(a)
medal_model <- lm(Medal_Proportion ~ prev_proportion + log(Population) + log(GDPPC) + is_host + is_soviet, data = training_data)
summary(medal_model)
vif(medal_model)
predict(medal_model, test_data[test_data$NOC == "SWE",])
a <- (predict(medal_model, test_data) - test_data$Medal_Proportion)* 100
mean(a)
sd(a)
medal_model <- lm(Medal_Proportion ~ prev_proportion + log(Population) + log(GDPPC) + is_host, data = training_data)
summary(medal_model)
vif(medal_model)
predict(medal_model, test_data[test_data$NOC == "SWE",])
a <- (predict(medal_model, test_data) - test_data$Medal_Proportion)* 100
mean(a)
sd(a)
knitr::opts_chunk$set(echo = TRUE)
nfl = read.csv("nfl2008_fga.csv")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(bestglm)
View(nfl)
str(nfl)
nfl$down <- as.factor(nfl$down)
nfl$GOOD <- as.factor(nfl$GOOD)
nfl$qtr <- as.factor(nfl$qtr)
goalmodel <- glm(GOOD ~ qtr + down + togo + distance + offscore + defscore + timerem, data = nfl, family = "binomial")
summary(goalmodel)
goalmodel <- glm(GOOD ~ down + distance + offscore + defscore, data = nfl, family = "binomial")
summary(goalmodel)
goalmodel <- glm(GOOD ~ distance + offscore + defscore, data = nfl, family = "binomial")
summary(goalmodel)
goalmodel <- glm(GOOD ~ distance, data = nfl, family = "binomial")
summary(goalmodel)
knitr::opts_chunk$set(echo = TRUE)
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
loadPkg("ggplot2")
# loadPkg("Rcpp")
Admit <- read.csv("LogReg.csv")
# Admit <- data.frame(read.csv("LogReg.csv"))
head(Admit)
summary(Admit)
# find  sd for all columns, using sapply
sapply(Admit, sd)
xtabs(~ admit + rank, data = Admit)
Admit$rank <- factor(Admit$rank)
admitLogit <- glm(admit ~ gre + gpa + rank, data = Admit, family = "binomial")
# admitLogit <- glm(admit ~ gre + gpa + rank, data = Admit, binomial(link = "logit") )
summary(admitLogit)
## CIs using profiled log-likelihood
confint(admitLogit)
## CIs using standard errors
confint.default(admitLogit)
exp(coef(admitLogit))
loadPkg("ResourceSelection") # function hoslem.test( ) for logit model evaluation
hoslem.test(Admit$admit, fitted(admitLogit)) # Hosmer and Lemeshow test, a chi-squared test
detach("package:ResourceSelection", unload = T) # good habit to remove unload packages no longer needed
loadPkg("pROC") # receiver operating characteristic curve, gives the diagnostic ability of a binary classifier system as its discrimination threshold is varied. The curve is on sensitivity/recall/true-positive-rate vs false_alarm/false-positive-rate/fall-out.
prob=predict(admitLogit, type = c("response"))
Admit$prob=prob
h <- roc(admit~prob, data=Admit)
auc(h) # area-under-curve prefer 0.8 or higher.
plot(h)
detach("package:pROC", unload = T) # good habit to remove unload packages no longer needed
loadPkg("pscl") # use pR2( ) function to calculate McFadden statistics for model eval
pR2(admitLogit)
detach("package:pscl", unload = T) # good habit to remove unload packages no longer needed
loadPkg("aod")  # Analysis of Overdispersed Data, used wald.test in logit example
wald.test(b = coef(admitLogit), Sigma = vcov(admitLogit), Terms = 4:6)
l <- cbind(0, 0, 0, 1, -1, 0)
wald.test(b = coef(admitLogit), Sigma = vcov(admitLogit), L = l)
## odds ratios and 95% CI
exp(cbind(OR = coef(admitLogit), confint(admitLogit)))
# bikeorig <- read.csv("bikedata.csv")
bikeorig <- data.frame(read.csv("bikedata.csv")) # make no difference here
# head(bikeorig)
str(bikeorig)
bikepeak <- subset(bikeorig,subset=(bikeorig$Hour >14 & bikeorig$Hour < 18)) # only the three peak hours
colnames(bikepeak)[5:14] <- c("day","workday","weather","tempF","tempFF","humidity","wind","cusers","rusers","tusers") # rename some columns
bikeclean = bikepeak[ , c("Season", "day", "workday", "weather", "tempFF", "humidity", "wind", "tusers")] # only take eight columns Hour, day, workday, weather, tempFF, humidity, wind, tusers
bikeclean$y = bikepeak[,4] # copy Holiday column and call it 'y'
#convert some columns into factos as appropriate
bikeclean$Season = factor(bikeclean$Season)
bikeclean$day = factor(bikeclean$day)
bikeclean$workday = factor(bikeclean$workday)
bikeclean$weather = factor(bikeclean$weather)
bikeclean$y <- ifelse(bikeclean$y == 1,TRUE,FALSE)
bikeclean$y = factor(bikeclean$y)
str(bikeclean)
loadPkg("leaps")
reg.leaps <- regsubsets(y~., data = bikeclean, nbest = 1, method = "exhaustive")  # leaps,
plot(reg.leaps, scale = "adjr2", main = "Adjusted R^2")
plot(reg.leaps, scale = "bic", main = "BIC")
plot(reg.leaps, scale = "Cp", main = "Cp")
detach("package:leaps", unload = T) # good habit to remove unload packages no longer needed
loadPkg("bestglm")
res.bestglm <- bestglm(Xy = bikeclean, family = binomial,
IC = "BIC",                 # Information criteria for
method = "exhaustive")
summary(res.bestglm)
res.bestglm$BestModels
summary(res.bestglm$BestModels)
detach("package:bestglm", unload = T) # good habit to remove unload packages no longer needed
cleannfl <- nfl[, c("qtr", "down", "togo", "distance", "offscore", "defscore", "timerem")]
cleannfl$y <- ifelse(nfl$GOOD == 1, TRUE, FALSE)
cleannfl$y <- as.factor(cleannfl$y)
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(bestglm)
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
summary(goalmodel)
goalmodel$BestModels
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
summary(goalmodel)
goalmodel$BestModels
summary(goalmodel$BestModels)
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
summary(goalmodel)
goalmodel$BestModels
summary(goalmodel$BestModels)
summary(goalmodel$BestModel)
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
summary(goalmodel$BestModel)
summary(goalmodel$BestModels)
goalmodel <- bestglm(Xy = cleannfl, family = "binomial")
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
summary(goalmodel$BestModel)
summary(goalmodel$BestModels)
goalmodel$BestModels
goalmodel <- bestglm(Xy = cleannfl, family = binomial, IC = "AIC")
summary(goalmodel$BestModel)
summary(goalmodel$BestModels)
goalmodel$BestModels
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
summary(goalmodel$BestModel)
summary(goalmodel$BestModels)
goalmodel$BestModels
predict(goalmodel, cleannfl[1,])
predict(goalmodel$BestModel, cleannfl[1,])
Admit$rank <- factor(Admit$rank)
#admitLogit <- glm(admit ~ gre + gpa + rank, data = Admit, family = "binomial")
admitLogit <- glm(admit ~ gre + gpa + rank, data = Admit, binomial(link = "logit") )
summary(admitLogit)
Admit$rank <- factor(Admit$rank)
#admitLogit <- glm(admit ~ gre + gpa + rank, data = Admit, family = "binomial")
admitLogit <- glm(admit ~ gre + gpa + rank, data = Admit, binomial(link = "logit") )
summary(admitLogit)
goalmodel <- glm(y ~ distance, data = cleannfl, family = "binomial")
summary(goalmodel)
exp(coef(goalmodel))
goalmodel <- glm(y ~ distance, data = cleannfl, family = "binomial")
summary(goalmodel)
exp(coef(goalmodel))
predict(goalmodel, newdata = cleannfl[1,], type = "response")
predict(goalmodel, newdata = cleannfl$distance[1] + 1, type = "response")
predict(goalmodel, newdata = cleannfl[1,], type = "response")
View(cleannfl)
cleannfl[1, "distance"] <- cleannfl$distance[1] + 1
predict(goalmodel, newdata = cleannfl[1,], type = "response")
cleannfl[1, "distance"] <- cleannfl$distance[1] - 1
cleannfl[1, "distance"] <- cleannfl$distance[1] + 1
predict(goalmodel, newdata = cleannfl[1,], type = "response")
cleannfl[1, "distance"] <- cleannfl$distance[1] - 1
predict(goalmodel, newdata = cleannfl[1,], type = "response")
a <- predict(goalmodel, newdata = cleannfl[1,], type = "response")
cleannfl[1, "distance"] <- cleannfl$distance[1] + 1
b <- predict(goalmodel, newdata = cleannfl[1,], type = "response")
cleannfl[1, "distance"] <- cleannfl$distance[1] - 1
b/a
a <- predict(goalmodel, newdata = cleannfl[1,])
cleannfl[1, "distance"] <- cleannfl$distance[1] + 1
b <- predict(goalmodel, newdata = cleannfl[1,])
cleannfl[1, "distance"] <- cleannfl$distance[1] - 1
a
b
b/a
a/b
predict(goalmodel, newdata = cleannfl[1,], type = "response")
cleannfl[1, "distance"] <- cleannfl$distance[1] + 1
predict(goalmodel, newdata = cleannfl[1,], type = "response")
cleannfl[1, "distance"] <- cleannfl$distance[1] - 1
library(pscl)
pr2(goalmodel)
pR2(goalmodel)
goalmodel <- glm(y ~ distance + togo, data = cleannfl, family = "binomial")
summary(goalmodel)
exp(coef(goalmodel))
goalmodel <- glm(y ~ distance, data = cleannfl, family = "binomial")
summary(goalmodel)
exp(coef(goalmodel))
goalmodel <- glm(y ~ distance + qtr, data = cleannfl, family = "binomial")
summary(goalmodel)
exp(coef(goalmodel))
pR2(goalmodel)
goalmodel <- glm(y ~ distance + qtr, data = cleannfl, family = "binomial")
summary(goalmodel)
exp(coef(goalmodel))
goalmodel <- glm(y ~ distance, data = cleannfl, family = "binomial")
summary(goalmodel)
exp(coef(goalmodel))
goalmodel <- glm(y ~ ., data = cleannfl, family = "binomial")
summary(goalmodel)
View(nfl)
nfl$kicker <- as.factor(nfl$kicker)
cleannfl <- nfl[, c("qtr", "down", "togo", "distance", "offscore", "defscore", "timerem", "kicker")]
cleannfl$y <- ifelse(nfl$GOOD == 1, TRUE, FALSE)
cleannfl$y <- as.factor(cleannfl$y)
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
summary(goalmodel$BestModel)
summary(goalmodel$BestModels)
goalmodel <- glm(y ~ ., data = cleannfl, family = "binomial")
summary(goalmodel)
cleannfl <- nfl[, c("qtr", "down", "togo", "distance", "offscore", "defscore", "timerem")]
cleannfl$y <- ifelse(nfl$GOOD == 1, TRUE, FALSE)
cleannfl$y <- as.factor(cleannfl$y)
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
summary(goalmodel$BestModel)
summary(goalmodel$BestModels)
goalmodel$BestModels
goalmodel <- glm(y ~ distance, data = cleannfl, family = "binomial")
summary(goalmodel)
exp(coef(goalmodel))
# cleannfl[1, "distance"] <- cleannfl$distance[1] + 1
# predict(goalmodel, newdata = cleannfl[1,], type = "response")
# cleannfl[1, "distance"] <- cleannfl$distance[1] - 1
pR2(goalmodel)
goalmodel <- glm(y ~ ., data = cleannfl, family = "binomial")
summary(goalmodel)
goalmodel <- bestglm(Xy = cleannfl, family = binomial, IC = "AIC")
summary(goalmodel$BestModel)
summary(goalmodel$BestModels)
cleannfl <- nfl[, c("qtr", "down", "togo", "distance", "kickdiff", "timerem")]
cleannfl$y <- ifelse(nfl$GOOD == 1, TRUE, FALSE)
cleannfl$y <- as.factor(cleannfl$y)
goalmodel <- glm(y ~ ., data = cleannfl, family = "binomial")
summary(goalmodel)
goalmodel <- bestglm(Xy = cleannfl, family = binomial, IC = "AIC")
summary(goalmodel$BestModel)
summary(goalmodel$BestModels)
nfl$homekick <- as.factor(nfl$homekick)
cleannfl <- nfl[, c("qtr", "down", "togo", "distance", "kickdiff", "timerem", "homekick")]
cleannfl$y <- ifelse(nfl$GOOD == 1, TRUE, FALSE)
cleannfl$y <- as.factor(cleannfl$y)
goalmodel <- glm(y ~ ., data = cleannfl, family = "binomial")
summary(goalmodel)
goalmodel <- bestglm(Xy = cleannfl, family = binomial, IC = "AIC")
summary(goalmodel$BestModel)
summary(goalmodel$BestModels)
str(nfl)
4 %% 2
4 %% 3
cleannfl <- nfl[, c("qtr", "down", "togo", "distance", "kickdiff", "homekick")]
cleannfl$y <- ifelse(nfl$GOOD == 1, TRUE, FALSE)
cleannfl$y <- as.factor(cleannfl$y)
cleannfl$timerem <- 900 - (nfl$timerem %% 900)
goalmodel <- glm(y ~ ., data = cleannfl, family = "binomial")
summary(goalmodel)
goalmodel <- bestglm(Xy = cleannfl, family = binomial, IC = "AIC")
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(bestglm)
library(pscl)
nfl <- read.csv("nfl2008_fga.csv")
str(nfl)
nfl$down <- as.factor(nfl$down)
nfl$GOOD <- as.factor(nfl$GOOD)
nfl$qtr <- as.factor(nfl$qtr)
nfl$homekick <- as.factor(nfl$homekick)
cleannfl <- nfl[, c("qtr", "down", "togo", "distance", "kickdiff", "homekick")]
cleannfl$y <- ifelse(nfl$GOOD == 1, TRUE, FALSE)
cleannfl$y <- as.factor(cleannfl$y)
cleannfl$timerem <- 900 - (nfl$timerem %% 900)
goalmodel <- glm(y ~ ., data = cleannfl, family = "binomial")
summary(goalmodel)
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
cleannfl <- nfl[, c("qtr", "down", "togo", "distance", "kickdiff", "homekick")]
cleannfl$timerem <- 900 - (nfl$timerem %% 900)
cleannfl$y <- ifelse(nfl$GOOD == 1, TRUE, FALSE)
cleannfl$y <- as.factor(cleannfl$y)
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
summary(goalmodel$BestModel)
summary(goalmodel$BestModels)
goalmodel$BestModels
goalmodel <- glm(y ~ distance, data = cleannfl, family = "binomial")
summary(goalmodel)
exp(coef(goalmodel))
pR2(goalmodel)
cleannfl <- nfl[, c("qtr", "down", "togo", "distance", "kickdiff", "homekick")]
cleannfl$timerem <- 900 - (nfl$timerem %% 900)
cleannfl$goal <- ifelse(nfl$GOOD == 1, TRUE, FALSE)
cleannfl$goal <- as.factor(cleannfl$goal)
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
summary(goalmodel$BestModel)
summary(goalmodel$BestModels)
goalmodel <- glm(goal ~ ., data = cleannfl, family = "binomial")
summary(goalmodel)
goalmodel <- glm(goal ~ distance, data = cleannfl, family = "binomial")
summary(goalmodel)
exp(coef(goalmodel))
str(nfl)
library(ResourceSelection)
hoslem.test(cleannfl$goal, fitted(goalmodel))
hoslem.test(cleannfl$goal, fitted(goalmodel, type = "response"))
hoslem.test(cleannfl$goal, fitted(goalmodel))
library(pROC)
prob <- predict(goalmodel, type = "response")
cleannfl$prob <- prob
curve <- roc(goal ~ prob, data = cleannfl)
auc(curve)
plot(curve)
pR2(goalmodel)
testdata <- data.frame(distance = c(50))
predict(goalmodel, newdata = testdata, type = "response")
nfl$kicker <- as.factor(nfl$kicker)
cleannfl <- nfl[, c("qtr", "down", "togo", "distance", "kickdiff", "homekick", "kicker", "kickteam")]
cleannfl$timerem <- 900 - (nfl$timerem %% 900)
cleannfl$goal <- ifelse(nfl$GOOD == 1, TRUE, FALSE)
cleannfl$goal <- as.factor(cleannfl$goal)
goalmodel <- bestglm(Xy = cleannfl, family = binomial)
summary(goalmodel$BestModel)
summary(goalmodel$BestModels)
goalmodel <- glm(goal ~ ., data = cleannfl, family = "binomial")
summary(goalmodel)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(bestglm)
library(pscl)
library(ResourceSelection)
library(pROC)
nfl <- read.csv("nfl2008_fga.csv")
summary(nfl$Blocked)
summary(as.factor(nfl$Blocked))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(bestglm)
library(pscl)
library(ResourceSelection)
library(pROC)
data(SAheart)
View(SAheart)
library(ggplot2)
library(dplyr)
library(leaps)
library(faraway)
#Load the dataset
athletes <- read.csv("athlete_events.csv", na.strings = c("NA"))
library(ggplot2)
library(dplyr)
library(leaps)
library(faraway)
#Load the dataset
athletes <- read.csv("athlete_events.csv", na.strings = c("NA"))
#Explore the structure of the dataset
str(athletes)
#athletes$Year <- as.integer(athletes$Year)
athletes$Medal <- factor(athletes$Medal, levels = c("Bronze", "Silver", "Gold"), ordered = TRUE)
athletes$NOC <- as.character(athletes$NOC)
#athletes$Gender <- as.factor(athletes$Gender)
athletes <- subset(athletes, select = -c(Age, Height, Weight, City, Games))
athletes <- subset(athletes, Season == "Summer")
hosts <- data.frame(Year = c(seq(1896, 1912, 4), seq(1920, 1936, 4), seq(1948, 2016, 4)), Host_NOC = c("GRE", "FRA", "USA", "GBR", "SWE", "BEL", "FRA", "NED", "USA", "GER", "GBR", "FIN", "AUS", "ITA", "JPN", "MEX", "GER", "CAN", "RUS", "USA", "KOR", "ESP", "USA", "AUS", "GRE", "CHN", "GBR", "BRA"))
athletes <- merge(athletes, hosts, by.x = "Year", by.y = "Year")
athletes$Host_NOC[athletes$Year == 1956 & athletes$City == "Stockholm"] <- "SWE"
athletes$Host_NOC <- as.character(athletes$Host_NOC)
athletes$NOC[athletes$NOC == "URS"] <- "RUS"
athletes$NOC[athletes$NOC == "FRG"] <- "GER"
athletes$NOC[athletes$NOC == "GDR"] <- "GER"
athletes$NOC[athletes$NOC == "ANZ"] <- "AUS"
#Equating China and Hong Kong would help too, but it seems like they have been participating as different teams since 1952.
summary(athletes)
#Subset data to obtain only the medal winners
winners_only <- subset(athletes, !is.na(Medal))
country_medals <- summarize(group_by(winners_only, Year, NOC), Medal_Count = n())
country_medals.plot <- ggplot(data = country_medals, aes(x = Year, y = Medal_Count, color = NOC)) + geom_point(show.legend = F) + labs(y = "Number of Medals", title = "Medals Earned by Countries over Years") + scale_x_continuous(breaks = seq(1896, 2016, 12)) + scale_y_continuous(breaks = seq(0, 450, 50))
country_medals.plot
#Find the total medal count per year
total_medals <- winners_only %>% group_by(Year) %>% summarize(Medal_Count = n())
#Include all of the host countries
hosts_only <- subset(winners_only, NOC %in% hosts$Host_NOC)
#Subset by medals won when the country that was a host country
medals_when_host <- subset(hosts_only, NOC == Host_NOC) %>% group_by(Year, NOC) %>% summarize(Medal_Count = n())
#Proportion of how many medals the host contry won out of all the medals avaliable for that year
host_medal_proportion <- data.frame(NOC = medals_when_host$NOC, Proportion = medals_when_host$Medal_Count / total_medals$Medal_Count)
#If a country hosted more than once, find the average of the proportion
host_medal_proportion <- host_medal_proportion %>% group_by(NOC) %>% summarize(Avg_Proportion = mean(Proportion))
#Subset by medals won when not acting as host country
medals_when_not_host <- subset(hosts_only, NOC != Host_NOC) %>% group_by(Year, NOC) %>% summarize(Medal_Count = n())
#Proportion of how many medals the host countries won out of medals avaliable when they are not host country
nonhost_medal_proportion <- merge(medals_when_not_host, total_medals, by.x = "Year", by.y = "Year")
nonhost_medal_proportion$Proportion <- nonhost_medal_proportion$Medal_Count.x / nonhost_medal_proportion$Medal_Count.y
#Average of proportion of medals won when a host country wasn't acting as a host country
nonhost_medal_proportion <- nonhost_medal_proportion %>% group_by(NOC) %>% summarize(Avg_Proportion = mean(Proportion))
host_advantage_test <- t.test(host_medal_proportion$Avg_Proportion, nonhost_medal_proportion$Avg_Proportion, paired = T, conf.level = 0.95, alternative = "greater")
host_advantage_test
unique_events_by_year <- data.frame(summarize(group_by(count(group_by(athletes, Year, Event)), Year), Events = n()))
unique_events_by_year.plot <- ggplot(data = unique_events_by_year, aes(x = Year, y = Events)) + geom_line(color = "red") + ylab("Number of Events") + labs(title = "Number of Events at each Olympic") + scale_x_continuous(breaks = seq(1896, 2016, 12)) + scale_y_continuous(breaks = seq(0, 325, 25))
unique_events_by_year.plot
participation <- data.frame(summarize(group_by(count(group_by(athletes, Year, ID)), Year), Participants = n()))
participation.plot <- ggplot(data = participation, aes(x = Year, y = Participants)) + geom_line(color = "red") + labs(y = "Unique Athletes", title = "Unique Athletes at each Olympic") + scale_x_continuous(breaks = seq(1896, 2016, 12)) + scale_y_continuous(breaks = seq(0, 12000, 1500))
participation.plot
gender_participation <- data.frame(summarize(group_by(count(group_by(athletes, Year, Sex, ID)), Year, Sex), Participants = n()))
gender_participation <- add_row(gender_participation, Year = 1896, Sex = "F", Participants = 0, .before = 1)
gender_participation.plot <- ggplot(data = gender_participation, aes(x = Year, y = Participants, color = Sex)) + geom_line() + labs(title = "Number of Men and Women Participants over the years") + scale_x_continuous(breaks = seq(1896, 2016, 12)) + scale_y_continuous(breaks = seq(0, 7000, 1000))
gender_participation.plot
#Difference in medal count for men and women
women_participation <- data.frame(Year = hosts$Year, Proportion = gender_participation$Participants[gender_participation$Sex == "F"] / participation$Participants * 100)
women_participation.plot <- ggplot(data = women_participation, aes(x = Year, y = Proportion)) + geom_line(color = "red") + labs(y = "Percent of Total Participation", title = "Women's Participation in Olympics over the years") + scale_x_continuous(breaks = seq(1896, 2016, 12)) + scale_y_continuous(breaks = seq(0, 48, 8))
women_participation.plot
#Create linear model for difference in medal count VS year
proportion_model <- lm(I(Proportion - 0) ~ I(Year - 1896) + 0, data = women_participation)
slope <- proportion_model$coefficients
cat("Slope:", slope, end = "\n")
cat("Intercept:", 0)
prop_func <- function(year) {
slope * (year - 1896)
}
women_participation.plot2 <- ggplot(data = women_participation, aes(x = Year, y = Proportion)) + stat_function(fun = prop_func) + labs(y = "Percent of Total Participation", title = "Women's Participation in Olympics over the years") + geom_point(color = "red") + scale_x_continuous(breaks = seq(1896, 2016, 12)) + scale_y_continuous(breaks = seq(0, 48, 8))
women_participation.plot2
cat("Predicted 50% year:", round(50 / slope + 1896))
before_cold_war <- subset(athletes, Year < 1947 & (NOC == "USA" | NOC == "RUS"))
before_cold_war_participation <- data.frame(summarize(group_by(count(group_by(before_cold_war, Year, NOC, ID)), Year, NOC), Participants = n()))
before_cold_war_participation.plot <- ggplot(data = before_cold_war_participation, aes(x = Year, y = Participants, color = NOC)) + geom_line() + labs(title = "USA and Russia's participation before Cold War") + scale_x_continuous(breaks = seq(1896, 1936, 4)) + scale_y_continuous(breaks = seq(0, 550, 50))
before_cold_war_participation.plot
cold_war <- subset(athletes, Year >= 1947 & Year <= 1991 & (NOC == "USA" | NOC == "RUS"))
cold_war_participation <- data.frame(summarize(group_by(count(group_by(cold_war, Year, NOC, ID)), Year, NOC), Participants = n()))
cold_war_participation.plot <- ggplot(data = cold_war_participation, aes(x = Year, y = Participants, color = NOC)) + geom_line() + labs(title = "USA and Russia's participation during Cold War") + scale_x_continuous(breaks = seq(1948, 1988, 4)) + scale_y_continuous(breaks = seq(275, 550, 25))
cold_war_participation.plot
russia_participation <- sum(subset(before_cold_war_participation, NOC == "RUS")$Participants)
usa_participation <- sum(subset(before_cold_war_participation, NOC == "USA")$Participants)
cat("Number of participants by Russia before the cold war", russia_participation, end = "\n")
cat("Number of participants by USA before the cold war", usa_participation)
russia_participation <- sum(subset(cold_war_participation, NOC == "RUS")$Participants)
usa_participation <- sum(subset(cold_war_participation, NOC == "USA")$Participants)
cat("Number of participants by Russia", russia_participation, end = "\n")
cat("Number of participants by USA", usa_participation)
before_cold_war_performance <- summarize(group_by(subset(before_cold_war, !is.na(Medal)), Year, NOC), Winners = n())
before_cold_war_performance.plot <- ggplot(data = before_cold_war_performance) + geom_line(aes(x = Year, y = Winners, color = NOC)) + labs(y = "Number of Medals", title = "USA and Russia's Performance before the Cold War") + scale_x_continuous(breaks = seq(1896, 1936, 4)) + scale_y_continuous(breaks = seq(0, 400, 50))
before_cold_war_performance.plot
cold_war_performance <- summarize(group_by(subset(cold_war, !is.na(Medal)), Year, NOC), Winners = n())
cold_war_performance.plot <- ggplot(data = cold_war_performance) + geom_line(aes(x = Year, y = Winners, color = NOC)) + labs(y = "Number of Medals", title = "USA and Russia's Performance during the Cold War") + scale_x_continuous(breaks = seq(1948, 1988, 4)) + scale_y_continuous(breaks = seq(100, 450, 50))
cold_war_performance.plot
russia_winners <- sum(subset(before_cold_war_performance, NOC == "RUS")$Winners)
usa_winners <- sum(subset(before_cold_war_performance, NOC == "USA")$Winners)
cat("Number of medals for Russia before the cold war:", russia_winners, end = "\n")
cat("Number of medals for USA before the cold war:", usa_winners, end = "\n")
russia_winners <- sum(subset(cold_war_performance, NOC == "RUS")$Winners)
usa_winners <- sum(subset(cold_war_performance, NOC == "USA")$Winners)
cat("Number of medals for Russia during the cold war:", russia_winners, end = "\n")
cat("Number of medals for USA during the cold war:", usa_winners)
country_medals.total <- country_medals %>% group_by(NOC) %>% summarize(Medal_Count = sum(Medal_Count))
country_medals.total <- data.frame(country_medals.total[order(country_medals.total$Medal_Count, decreasing = T),])
print(country_medals.total[1:5,])
country_medals.sport <- winners_only %>% group_by(NOC, Sport) %>% summarize(Medal_Count = n())
country_medals.sport <- country_medals.sport %>% group_by(Sport) %>% filter(Medal_Count == max(Medal_Count))
country_medals.sport <- country_medals.sport[order(country_medals.sport$Medal_Count, decreasing = T),]
print(country_medals.sport)
sport_medals <- winners_only %>% group_by(Sport) %>% summarize(Medal_count = n())
sport_medals <- sport_medals[order(sport_medals$Medal_count, decreasing = T),]
print(sport_medals)
additional_data <- readxl::read_excel("mpd2018.xlsx", sheet = "Full data")
additional_data <- subset(additional_data, select = -c(rgdpnapc, i_cig, i_bm), year >= 1896)
names(additional_data) <- c("NOC", "Country", "Year", "GDPPC", "Population")
additional_data$Population <- additional_data$Population * 1000
additional_data$GDP <- additional_data$GDPPC * additional_data$Population
world_gdp <- additional_data %>% group_by(Year) %>% summarise(total_gdp = sum(GDP, na.rm = T))
additional_data$GDPShare <- 0
for(i in seq(nrow(additional_data))){
additional_data$GDPShare[i] <- additional_data$GDP[i] / world_gdp$total_gdp[world_gdp$Year == additional_data$Year[i]]
}
medal_counts <- summarize(group_by(winners_only, Year, Host_NOC, NOC), Medal_Count = n())
medal_counts$is_host <- ifelse(medal_counts$NOC == medal_counts$Host_NOC, 1, 0)
countries_of_interest <- subset(medal_counts, select = c(NOC), Year == 2012 & Medal_Count >= 5)
medal_counts <- subset(medal_counts, NOC %in% countries_of_interest$NOC)
medal_counts <- subset(medal_counts, Year >= 1988)
medal_counts$planned_economy <- ifelse(medal_counts$NOC %in% c("CHN", "PRK", "VIE", "LAO", "CUB"), 1, 0)
medal_counts$planned_economy <- ifelse(medal_counts$Year <= 1992 & medal_counts$NOC %in% c("MGL", "SLO", "BIH", "SRB", "ANG", "COD", "ERI"), 1, medal_counts$planned_economy)
medal_counts$is_soviet <- ifelse(medal_counts$NOC %in% c("RUS", "UKR", "BLR", "UZB", "KAZ", "GEO", "AZE", "LTU", "MDA", "LAT", "KGZ", "TJK", "ARM", "TKM", "EST"), 1, 0)
names(total_medals) <- c("Year", "Total_Medals")
medal_counts <- subset(medal_counts, NOC != "EUN" & NOC != "SCG")
medal_counts <- merge(medal_counts, total_medals)
final_data <- merge(medal_counts, additional_data)
final_data$Medal_Proportion <- final_data$Medal_Count / final_data$Total_Medals
final_data$is_host <- as.factor(final_data$is_host)
final_data$is_soviet <- as.factor(final_data$is_soviet)
final_data$planned_economy <- as.factor(final_data$planned_economy)
for(i in seq(29, nrow(final_data)))
final_data[i,"prev_proportion"] <- ifelse(length(final_data$Medal_Proportion[(final_data$Year == final_data$Year[i] - 4) & (final_data$NOC == final_data$NOC[i])]) != 0, final_data$Medal_Proportion[(final_data$Year == final_data$Year[i] - 4) & (final_data$NOC == final_data$NOC[i])], 0)
final_data <- na.omit(final_data)
training_data <- subset(final_data, Year < 2016)
test_data <- subset(final_data, Year == 2016)
medal_model <- lm(Medal_Proportion ~ prev_proportion + GDPShare + GDPPC + is_host, data = training_data)
summary(medal_model)
vif(medal_model)
df <- data.frame(prev_proportion = c(0.0316361839), GDPShare = c(5400/97789.46), is_host = test_data$is_host[5], GDPPC = c(51000), Population = c(125039023))
predict(medal_model, df)
predict(medal_model, test_data[test_data$NOC == "USA",])
a <- (predict(medal_model, test_data) - test_data$Medal_Proportion)* 100
mean(a)
sd(a)
reg.best <- regsubsets(Medal_Proportion ~ is_host + planned_economy + is_soviet + log(GDPPC) + log(Population) + GDP + GDPShare + prev_proportion + Total_Medals, data = training_data)
plot(reg.best, scale = "bic")
summary(reg.best)
medal_model <- lm(Medal_Proportion ~ prev_proportion + GDPShare + is_host, data = training_data)
summary(medal_model)
vif(medal_model)
df <- data.frame(prev_proportion = c(0.0316361839), GDPShare = c(5400/97789.46), is_host = test_data$is_host[5], GDPPC = c(51000), Population = c(125039023))
predict(medal_model, df)
predict(medal_model, test_data[test_data$NOC == "USA",])
